#include<iostream>
#include<glad/glad.h>
#include<GLFW/glfw3.h>

// the coordinate system is normalize, (0,0) is the center, x=right directions, y=up direction
// the CS is normalized from -1 to +1
const char* vertexShaderSource = "#version 360 core\n"
"layout (location = 0) in vec3 aPos;\n"
"void main()\n"
"{\n"
"	gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
"}\0";
const char* fragmentShaderSource = "#version 360 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"	FragColor = vec4(0.8f, 0.3f, 0.02f, 1.0f);\n"
"}\n\0";

int main()
{
	// initialiser GLFW
	glfwInit();
	// Indique a GLFW la version qon utilise, ici la version 3
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	// Indique a GLFW le "core" utilise, ici "core profile"= functions modernes
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	GLfloat vertices[] =
	{
		-0.5f, -0.5f*float(sqrt(3)) / 3 , 0.0f,
		-0.5f,  0.5f * float(sqrt(3)) / 3 , 0.0f,
		 0.0f, 0.5f * float(sqrt(3))*2 / 3 , 0.0f,
	}; 
    


	// On cree un GLFWwindow de taille 800*800 (pixels) et on lui donne le nom 'Project2'
	GLFWwindow* window = glfwCreateWindow(800, 800, "Project2", NULL, NULL);
	// Pour verification si GLFW n'arrive pas a creer la window
	if (window == NULL)
	{

		std::cout << "Failed to Create GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}
	// Introduce the window into the current context
	glfwMakeContextCurrent(window);
	// load Glad to configures OpenGL
	gladLoadGL();
	// specifier le Viewport de OpenGL in the window , ici de (x,y)= (0,0) a (800, 800)
	glViewport(0, 0, 800, 800); 

	// All the openGL object are access by a reference
	GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
	glCompileShader(vertexShader);

	GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
	glCompileShader(fragmentShader);

	GLuint shaderProgram = glCreateProgram();
	glAttachShader(shaderProgram, vertexShader);
	glAttachShader(shaderProgram, fragmentShader);
	glLinkProgram(shaderProgram);

	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);


	GLuint VAO, VBO;
	glGenVertexArrays(1, &VAO);
	glGenBuffers(1, &VBO);

	glBindVertexArray(VAO);

	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW );
	
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	
	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);

		
	// Clean the back buffer and assign the backgroung color to it
	glClearColor(0.07f, 0.13f, 0.17f, 1.0f); // Background color
	glClear(GL_COLOR_BUFFER_BIT);
	// swap the back buffer with the front buffer
	glfwSwapBuffers(window);
	
	 


	while (!glfwWindowShouldClose(window)); // Maintain the window until we close it manually
	{
		glClearColor(0.07f, 0.13f, 0.17f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);
		glUseProgram(shaderProgram);
		glBindVertexArray(VAO);
		glDrawArrays(GL_TRIANGLES, 0, 3);
		glfwSwapBuffers(window); 

		// Take care of all GLW events // 
		glfwPollEvents();

	}

	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);
	glDeleteProgram(shaderProgram);

	glfwDestroyWindow(window); // destroy the window


	glfwTerminate(); // terminate GLFW
	return 0;
}